/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

void backtrack(int* nums, int numsSize, int* path, int* used, int depth, int** result, int* returnSize, int* returnColumnSizes) {
    if (depth == numsSize) {
        result[*returnSize] = (int*)malloc(numsSize * sizeof(int));
        for (int i = 0; i < numsSize; i++) {
            result[*returnSize][i] = path[i];
        }
        returnColumnSizes[*returnSize] = numsSize;
        (*returnSize)++;
        return;
    }
    for (int i = 0; i < numsSize; i++) {
        if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
            continue;
        }
        used[i] = 1;
        path[depth] = nums[i];
        backtrack(nums, numsSize, path, used, depth + 1, result, returnSize, returnColumnSizes);
        used[i] = 0;
    }
}

int** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    int maxPermutations = 1;
    for (int i = 1; i <= numsSize; i++) {
        maxPermutations *= i;
    }

    int** result = (int**)malloc(maxPermutations * sizeof(int*));
    *returnSize = 0;
    *returnColumnSizes = (int*)malloc(maxPermutations * sizeof(int));

    qsort(nums, numsSize, sizeof(int), compare);

    int* path = (int*)malloc(numsSize * sizeof(int));
    int* used = (int*)calloc(numsSize, sizeof(int));

    backtrack(nums, numsSize, path, used, 0, result, returnSize, *returnColumnSizes);

    free(path);
    free(used);

    return result;
}
