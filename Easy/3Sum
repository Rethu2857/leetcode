/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int comparator(const void *a, const void *b)
{
    return (*(int *)a - *(int *)b);
}

void twosum(int *nums, int numsSize, int i, int **result, int *returnSize, int *returnColumnSizes)
{
    int l=i+1, r=numsSize-1;
    while(l < r)
    {
        int sum = nums[i] + nums[l] + nums[r];
        if(sum < 0)
            l++;
        else if(sum > 0)
            r--;
        else
        {
            result[*returnSize] = (int *)malloc(sizeof(int)*3);
            result[*returnSize][0] = nums[i];
            result[*returnSize][1] = nums[l++];
            result[*returnSize][2] = nums[r--];
            returnColumnSizes[*returnSize] = 3;
            (*returnSize)++;
            while(l<r && nums[l]==nums[l-1])
                l++;
        }
    }
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    *returnSize = 0;
    if(nums == NULL || numsSize == 0)
        return NULL;
    
    qsort(nums, numsSize, sizeof(int), comparator);
    
    int **result = (int **)malloc(sizeof(int *) * numsSize * numsSize);
    *returnColumnSizes = (int *)malloc(sizeof(int) * numsSize * numsSize);
    
    for(int i=0; i<numsSize && nums[i]<=0; i++)
    {
        if(i==0 || nums[i]!=nums[i-1])
        {
            twosum(nums, numsSize, i, result, returnSize, *returnColumnSizes);
        }
    }
    return result;
}
